{"version":3,"file":"static/js/395.20a27c23.chunk.js","mappings":"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","sources":["components/Toggle.tsx","components/List.tsx"],"sourcesContent":["function Toggle({ checked }: { checked: boolean }) {\n  if (checked) {\n    return (\n      <div className=\"relative cursor-pointer \">\n        <div className=\"block bg-gray-100 w-14 h-8 rounded-full border-2 border-gray-500\"></div>\n        <div\n          className=\"dot absolute left-1 top-1 \n        bg-blue-700 hover:bg-blue-800 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\n        w-6 h-6 rounded-full transition\"\n        ></div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"relative cursor-pointer \">\n        <div className=\"block bg-gray-100  w-14 h-8 rounded-full border-2 border-gray-500\"></div>\n        <div\n          className=\"dot absolute left-1 top-1 \n        bg-blue-700 hover:bg-blue-800 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\n        w-6 h-6 rounded-full transition translate-x-full\"\n        ></div>\n      </div>\n    );\n  }\n}\n\ntype Props = {\n  name: string;\n  toggle: boolean;\n  setToggle: React.Dispatch<React.SetStateAction<boolean>>;\n  on: string;\n  off: string;\n};\n\nexport default function Switch({ name, toggle, setToggle, on, off }: Props) {\n  function keyPressToggle(\n    e: React.KeyboardEvent<HTMLLabelElement>,\n    toggle: boolean,\n    setToggle: React.Dispatch<React.SetStateAction<boolean>>\n  ) {\n    const keys = [\"Enter\", \" \", \"Return\"];\n    if (keys.includes(e.key)) {\n      setToggle(!toggle);\n    }\n  }\n  return (\n    <label\n      htmlFor={name}\n      key={name}\n      className=\"flex items-center justify-between space-x-4 min-w-[8rem]\"\n      onKeyPress={(e) => keyPressToggle(e, toggle, setToggle)}\n      tabIndex={0}\n    >\n      <span className=\"dark:text-gray-200\">{toggle ? off : on}</span>\n      <input\n        id={name}\n        type=\"checkbox\"\n        className=\"sr-only relative focus-visible:ring hidden\"\n        checked={toggle}\n        onChange={() => setToggle(!toggle)}\n        tabIndex={-1}\n        aria-hidden=\"true\"\n      />\n      <Toggle checked={toggle} />\n    </label>\n  );\n}\n","import { SyntheticEvent, useContext, useEffect, useState } from \"react\";\nimport { GlobeMethods } from \"react-globe.gl\";\nimport { FormattedMessage } from \"react-intl\";\nimport { LocaleContext } from \"../i18n/LocaleContext\";\nimport { Country, LanguageName } from \"../lib/country\";\nimport { Locale } from \"../lib/locale\";\nimport { answerName } from \"../util/answer\";\nimport { findCentre, turnGlobe } from \"../util/globe\";\nimport Toggle from \"./Toggle\";\n\ntype Props = {\n  guesses: Country[];\n  win: boolean;\n  globeRef: React.MutableRefObject<GlobeMethods>;\n  practiceMode: boolean;\n};\n\nfunction reorderGuesses(guessList: Country[], practiceMode: boolean) {\n  return [...guessList].sort((a, b) => {\n    // practice\n    if (practiceMode) {\n      const answerCountry = JSON.parse(\n        localStorage.getItem(\"practice\") as string\n      ) as Country;\n      const answerName = answerCountry.properties.NAME;\n      if (a.properties.NAME === answerName) {\n        return -1;\n      } else if (b.properties.NAME === answerName) {\n        return 1;\n      } else {\n        return a.proximity - b.proximity;\n      }\n    }\n\n    // daily\n    if (a.properties.NAME === answerName) {\n      return -1;\n    } else if (b.properties.NAME === answerName) {\n      return 1;\n    } else {\n      return a.proximity - b.proximity;\n    }\n  });\n}\n\nexport default function List({ guesses, win, globeRef, practiceMode }: Props) {\n  const [orderedGuesses, setOrderedGuesses] = useState(\n    reorderGuesses(guesses, practiceMode)\n  );\n  const [miles, setMiles] = useState(false);\n  const { locale } = useContext(LocaleContext);\n  const langNameMap: Record<Locale, LanguageName> = {\n    \"pt-BR\": \"NAME_PT\",\n    \"es-MX\": \"NAME_ES\",\n    \"en-CA\": \"NAME_EN\",\n    \"fr-FR\": \"NAME_FR\",\n    \"de-DE\": \"NAME_DE\",\n    \"hu-HU\": \"NAME_HU\",\n    \"pl-PL\": \"NAME_PL\",\n    \"it-IT\": \"NAME_IT\",\n    \"sv-SE\": \"NAME_SV\",\n  };\n  const langName = langNameMap[locale];\n\n  useEffect(() => {\n    setOrderedGuesses(reorderGuesses(guesses, practiceMode));\n  }, [guesses, practiceMode]);\n\n  function formatKm(m: number, miles: boolean) {\n    const METERS_PER_MILE = 1609.34;\n    const BIN = 10;\n    const value = miles ? m / METERS_PER_MILE : m / 1000;\n    if (value < BIN) return \"< \" + BIN;\n\n    const rounded = Math.round(value / BIN) * BIN;\n    // const max = min + BIN;\n    const format = (num: number) =>\n      num.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n    return `~ ${format(rounded)}`;\n  }\n\n  const qualifier = win ? \"Answer\" : \"Closest\";\n\n  function turnToCountry(e: SyntheticEvent, idx: number) {\n    const clickedCountry = isSortedByDistance\n      ? orderedGuesses[idx]\n      : guesses[idx];\n    const { lat, lng, altitude } = findCentre(clickedCountry);\n    turnGlobe({ lat, lng, altitude }, globeRef, \"zoom\");\n  }\n\n  const closest = orderedGuesses[0];\n  const farthest = orderedGuesses[orderedGuesses.length - 1];\n\n  const [isSortedByDistance, setIsSortedByDistance] = useState(true);\n  const guessesToDisplay = isSortedByDistance ? orderedGuesses : guesses;\n\n  return (\n    <div className=\"md:ml-10 md:mr-0 py-8 dark:text-white z-30 mb-20\">\n      {orderedGuesses.length > 0 && (\n        <p className=\"my-1\">\n          {isSortedByDistance ? (\n            <b>\n              <FormattedMessage id={qualifier} />\n            </b>\n          ) : (\n            <b>\n              <FormattedMessage id=\"Guessed\" />\n            </b>\n          )}\n        </p>\n      )}\n      <ul className=\"grid grid-cols-3 md:grid-cols-4 gap-3\">\n        {guessesToDisplay.map((guess, idx) => {\n          const { NAME_LEN, ABBREV, NAME, FLAG } = guess.properties;\n          const flag = (FLAG || \"\").toLocaleLowerCase();\n          let name = NAME_LEN >= 10 ? ABBREV : NAME;\n          if (locale !== \"en-CA\") {\n            name = guess.properties[langName];\n          }\n\n          return (\n            <li key={idx}>\n              <button\n                onClick={(e) => turnToCountry(e, idx)}\n                className=\"flex items-center cursor-pointer\"\n              >\n                <img\n                  src={`https://flagcdn.com/w20/${flag.toLowerCase()}.png`}\n                  alt={name}\n                  className=\"\"\n                />\n                <span className=\"ml-2 text-md text-left\">{name}</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n      {closest && farthest && (\n        <div className=\"mt-8\">\n          <div className=\"flex items-center space-x-1\">\n            <p>\n              <FormattedMessage id=\"Game8\" />:{\" \"}\n              {formatKm(closest?.proximity, miles)}\n            </p>\n            <Toggle\n              name=\"miles\"\n              setToggle={setMiles}\n              toggle={miles}\n              on=\"km\"\n              off=\"miles\"\n            />\n          </div>\n          <p>\n            <button\n              onClick={() => setIsSortedByDistance(!isSortedByDistance)}\n              className=\"mt-2\"\n            >\n              <span className=\"text-md underline\">\n                <FormattedMessage\n                  id={isSortedByDistance ? \"SortByGuesses\" : \"SortByDistance\"}\n                />\n              </span>\n            </button>\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":["Toggle","checked","className","Switch","name","toggle","setToggle","on","off","htmlFor","onKeyPress","e","includes","key","keyPressToggle","tabIndex","id","type","onChange","reorderGuesses","guessList","practiceMode","sort","a","b","answerName","JSON","parse","localStorage","getItem","properties","NAME","proximity","List","guesses","win","globeRef","useState","orderedGuesses","setOrderedGuesses","miles","setMiles","locale","useContext","LocaleContext","langName","useEffect","qualifier","closest","farthest","length","isSortedByDistance","setIsSortedByDistance","guessesToDisplay","map","guess","idx","NAME_LEN","ABBREV","flag","FLAG","toLocaleLowerCase","onClick","clickedCountry","findCentre","lat","lng","altitude","turnGlobe","turnToCountry","src","toLowerCase","alt","m","value","rounded","Math","round","toFixed","replace","formatKm"],"sourceRoot":""}